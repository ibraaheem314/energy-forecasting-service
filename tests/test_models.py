"""Tests for the simplified model services.""" import pytest import pandas as pd import numpy as np from datetime import datetime, timedelta import sys from pathlib import Path # Add project path sys.path.append(str(Path(__file__).parent.parent)) from app.services.models import DummyModel, load_production_model, predict_with_model class TestDummyModel: """Test cases for the DummyModel class.""" def test_dummy_model_attributes(self): """Test that DummyModel has expected attributes.""" model = DummyModel() assert model.name == "baseline-weekly" assert model.version == "0.1" assert hasattr(model, 'predict') def test_predict_with_empty_data(self): """Test prediction with empty DataFrame.""" model = DummyModel() empty_df = pd.DataFrame() result = model.predict(empty_df, horizon=24) assert 'yhat' in result assert len(result['yhat']) == 24 assert all(x == 0 for x in result['yhat']) def test_predict_with_data(self): """Test prediction with valid data.""" model = DummyModel() dates = pd.date_range(start=datetime.now() - timedelta(days=1), end=datetime.now(), freq='H') df = pd.DataFrame({'y': [30000] * len(dates)}, index=dates) result = model.predict(df, horizon=24) assert 'yhat' in result assert len(result['yhat']) == 24 assert all(x == 30000 for x in result['yhat']) def test_load_production_model(): """Test loading production model.""" model = load_production_model() assert model is not None assert isinstance(model, DummyModel) def test_predict_with_model(): """Test the predict_with_model function.""" model = DummyModel() dates = pd.date_range(start=datetime.now() - timedelta(days=1), end=datetime.now(), freq='H') df = pd.DataFrame({'y': [30000] * len(dates)}, index=dates) result = predict_with_model(model, df, horizon=24, with_intervals=True) assert 'yhat' in result assert len(result['yhat']) == 24