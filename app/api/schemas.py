"""Pydantic schemas for API request/response validation.""" from pydantic import BaseModel, Field from typing import List, Dict, Any, Optional from datetime import datetime class ForecastRequest(BaseModel): """Request schema for forecast generation.""" location: str = Field(..., description="Location identifier (e.g., 'region_1', 'grid_A')") start_time: datetime = Field(..., description="Start time for forecast period") end_time: datetime = Field(..., description="End time for forecast period") forecast_type: str = Field(default="consumption", description="Type of forecast: 'consumption' or 'production'") resolution: str = Field(default="hourly", description="Forecast resolution: 'hourly', 'daily', 'weekly'") confidence_interval: bool = Field(default=True, description="Include confidence intervals in predictions") class Config: json_encoders = { datetime: lambda v: v.isoformat() } class ForecastDataPoint(BaseModel): """Individual forecast data point.""" timestamp: datetime value: float = Field(..., description="Predicted energy value") lower_bound: Optional[float] = Field(None, description="Lower confidence bound") upper_bound: Optional[float] = Field(None, description="Upper confidence bound") confidence: Optional[float] = Field(None, description="Prediction confidence score") class ForecastResponse(BaseModel): """Response schema for forecast generation.""" forecast_id: str = Field(..., description="Unique forecast identifier") location: str start_time: datetime end_time: datetime forecast_type: str = "consumption" resolution: str = "hourly" predictions: List[ForecastDataPoint] = Field(..., description="Forecast predictions") metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional forecast metadata") created_at: datetime = Field(default_factory=datetime.utcnow) class Config: json_encoders = { datetime: lambda v: v.isoformat() } class HealthResponse(BaseModel): """Health check response schema.""" status: str = Field(..., description="Service status: 'healthy' or 'unhealthy'") timestamp: datetime = Field(default_factory=datetime.utcnow) version: str = Field(..., description="Service version") checks: Dict[str, bool] = Field(default_factory=dict, description="Individual health check results") class ModelStatusResponse(BaseModel): """Model status response schema.""" model_name: str model_version: str last_trained: Optional[datetime] accuracy_metrics: Dict[str, float] = Field(default_factory=dict) is_active: bool = True last_prediction: Optional[datetime] class TrainingRequest(BaseModel): """Request schema for model training.""" model_type: str = Field(..., description="Type of model to train") start_date: datetime = Field(..., description="Training data start date") end_date: datetime = Field(..., description="Training data end date") hyperparameters: Dict[str, Any] = Field(default_factory=dict) experiment_name: Optional[str] = Field(None, description="MLflow experiment name") class TrainingResponse(BaseModel): """Response schema for training job.""" job_id: str = Field(..., description="Training job identifier") status: str = Field(..., description="Job status: 'started', 'running', 'completed', 'failed'") created_at: datetime = Field(default_factory=datetime.utcnow) estimated_completion: Optional[datetime] = Field(None)