[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "energy-forecasting"
version = "1.0.0"
description = "Prévision de consommation énergétique avec Machine Learning"
readme = "README.md"
authors = [
    { name = "Data Science Project", email = "project@energy-forecasting.com" }
]
keywords = [
    "energy", "forecasting", "time-series", "machine-learning",
    "data-science", "prediction", "rte"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]
requires-python = ">=3.10"

# Dépendances minimales pour Option B (local, sans Docker) :
# - API FastAPI
# - Data processing
# - ML de base (sklearn, lightgbm, pmdarima pour ARIMA/SARIMA)
# - Utilitaires
dependencies = [
    # Web
    "fastapi>=0.110.0",
    "uvicorn>=0.29.0",
    "pydantic>=2.6.0",

    # Data
    "pandas>=2.1.0",
    "numpy>=1.26.0",

    # ML
    "scikit-learn>=1.3.0",
    "lightgbm>=4.2.0",
    "pmdarima>=2.0.4",
    "statsmodels>=0.14.0",

    # Utils
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "click>=8.1.0",
    "tqdm>=4.66.0",
    "joblib>=1.3.0",
]

[project.optional-dependencies]
# Outils de dev/tests/qualité
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.4.0",
    "black>=24.4.0",
    "mypy>=1.8.0",
    "ipython>=8.15.0",
    "jupyterlab>=4.0.0",
]

# Dashboard & visualisation
dashboard = [
    "streamlit>=1.27.0",
    "plotly>=5.15.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

# Dépendances lourdes à installer uniquement si besoin
ml_heavy = [
    "prophet>=1.1.0",
    "xgboost>=1.7.0",
]

# Tout-en-un (dev + dashboard + libs lourdes)
all = [
    "energy-forecasting[dev,dashboard,ml_heavy]"
]

[project.urls]
Homepage = "https://github.com/ibraaheem314/energy-forecasting-service"
Repository = "https://github.com/ibraaheem314/energy-forecasting-service.git"

# Scripts CLI (assure-toi que ces fonctions existent)
[project.scripts]
energy-api = "app.api.main:main"
energy-dashboard = "dashboard.app:main"

[tool.setuptools]
# Utilise la découverte automatique des paquets

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "dashboard*", "jobs*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql", "*.toml"]

# Black
[tool.black]
line-length = 100
target-version = ["py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["app", "jobs", "dashboard"]

# mypy
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
# Les warnings tiers (statsmodels/prophet/numba...) peuvent être bruyants ;
# on n'échoue pas sur les DeprecationWarnings par défaut.
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit (si utilisé)
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]